use chacha20::ChaCha20;
use string_search::{StringBody, StringBody256, SubString, SubString256};

global MAX: u32 = 192;

fn main(
    mut key: [u32; 8],
    ctr: u32,
    mut nonce: [u32; 3],
    ciphertext: pub BoundedVec<u8, MAX>,
    plaintext: pub BoundedVec<u8, MAX>,
) {
    let chacha20 = ChaCha20::new(&mut key, ctr, &mut nonce);

    let decrypted = chacha20.decrypt(ciphertext);
    let decrypted_haystack: StringBody256 = StringBody::new(decrypted.storage(), decrypted.len());

    let plaintext_needle: SubString256 = SubString::new(plaintext.storage(), plaintext.len());

    let (result, _): (bool, u32) = decrypted_haystack.substring_match(plaintext_needle);
    assert(result);
}

#[test]
fn test_main_0() {
    let key: [u32; 8] = [
        0x605fec2f, 0x30ffd5df, 0xf722ed31, 0xed119037, 0xa02cf2f2, 0x12d1e65a, 0xb1fb9cf4,
        0xf8425b7b,
    ];
    let ctr: u32 = 1;
    let nonce: [u32; 3] = [0x5ef1f372, 0x244dd026, 0x795c577c];

    let ciphertext: [u8; MAX] = [
        0x5d, 0x14, 0x47, 0xb5, 0xa2, 0xa7, 0x97, 0xce, 0x0d, 0xfc, 0x5f, 0x82, 0x67, 0xe2, 0xe3,
        0x6c, 0xa0, 0x91, 0x83, 0x06, 0x54, 0xb1, 0x3d, 0xf6, 0x7f, 0x19, 0xec, 0x87, 0xe7, 0xe9,
        0x7a, 0xd7, 0xc7, 0xcc, 0x96, 0x9e, 0xb6, 0x92, 0x16, 0x49, 0x30, 0xa1, 0x10, 0x09, 0xe8,
        0x3a, 0xfd, 0x9c, 0x7d, 0x0a, 0x58, 0xf2, 0x4b, 0xf6, 0xc9, 0x70, 0x11, 0x4d, 0x2e, 0x11,
        0xe0, 0x3d, 0xa5, 0x07, 0x4d, 0x73, 0x9b, 0x1c, 0x63, 0x0e, 0xdb, 0x36, 0x11, 0x7a, 0x3f,
        0x02, 0x5f, 0x07, 0x37, 0xb8, 0x36, 0x5d, 0x6f, 0x09, 0x97, 0x21, 0x78, 0x93, 0xbc, 0x17,
        0x18, 0x42, 0x60, 0x35, 0x70, 0xb7, 0xb9, 0xce, 0x3b, 0x68, 0xba, 0x96, 0xac, 0x27, 0x7c,
        0xb5, 0x1b, 0x97, 0xda, 0x44, 0xd8, 0x3f, 0x49, 0x84, 0x17, 0x5d, 0xa2, 0x25, 0xd6, 0xdf,
        0x26, 0xc8, 0x75, 0xa1, 0xab, 0x93, 0xaf, 0x9a, 0x5d, 0x42, 0x90, 0x20, 0x47, 0xb4, 0xc1,
        0xf5, 0x3b, 0xac, 0xeb, 0xf2, 0x4d, 0x2c, 0x93, 0xaf, 0x29, 0xc5, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    let needle_ciphertext_bv = BoundedVec { storage: ciphertext, len: 146 }; // We only take 146 bytes of the ciphertext because the rest is padding.

    let plaintext: [u8; MAX] = [
        0x50, 0x4f, 0x53, 0x54, 0x20, 0x2f, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2d, 0x6d, 0x65, 0x73,
        0x73, 0x61, 0x67, 0x65, 0x3f, 0x3d, 0x20, 0x48, 0x54, 0x54, 0x50, 0x2f, 0x31, 0x2e, 0x31,
        0x0d, 0x0a, 0x48, 0x6f, 0x73, 0x74, 0x3a, 0x20, 0x31, 0x37, 0x32, 0x2e, 0x32, 0x32, 0x2e,
        0x30, 0x2e, 0x34, 0x3a, 0x35, 0x30, 0x30, 0x30, 0x0d, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
        0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x0d, 0x0a, 0x43,
        0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x54, 0x79, 0x70, 0x65, 0x3a, 0x20, 0x61, 0x70,
        0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x0d,
        0x0a, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x2d, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
        0x3a, 0x20, 0x31, 0x37, 0x0d, 0x0a, 0x0d, 0x0a, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22,
        0x3a, 0x22, 0x4d, 0x61, 0x73, 0x73, 0x69, 0x6c, 0x22, 0x7d, 0x17, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];

    let heystack_plaintext_bv = BoundedVec { storage: plaintext, len: 146 };
    main(key, ctr, nonce, needle_ciphertext_bv, heystack_plaintext_bv);
}

#[test]
fn test_main_1() {
    let key: [u32; 8] = [
        0x605fec2f, 0x30ffd5df, 0xf722ed31, 0xed119037, 0xa02cf2f2, 0x12d1e65a, 0xb1fb9cf4,
        0xf8425b7b,
    ];
    let ctr: u32 = 1;
    let nonce: [u32; 3] = [0x5ef1f372, 0x244dd026, 0x795c577c];

    let ciphertext: [u8; MAX] = [
        0x5d, 0x14, 0x47, 0xb5, 0xa2, 0xa7, 0x97, 0xce, 0x0d, 0xfc, 0x5f, 0x82, 0x67, 0xe2, 0xe3,
        0x6c, 0xa0, 0x91, 0x83, 0x06, 0x54, 0xb1, 0x3d, 0xf6, 0x7f, 0x19, 0xec, 0x87, 0xe7, 0xe9,
        0x7a, 0xd7, 0xc7, 0xcc, 0x96, 0x9e, 0xb6, 0x92, 0x16, 0x49, 0x30, 0xa1, 0x10, 0x09, 0xe8,
        0x3a, 0xfd, 0x9c, 0x7d, 0x0a, 0x58, 0xf2, 0x4b, 0xf6, 0xc9, 0x70, 0x11, 0x4d, 0x2e, 0x11,
        0xe0, 0x3d, 0xa5, 0x07, 0x4d, 0x73, 0x9b, 0x1c, 0x63, 0x0e, 0xdb, 0x36, 0x11, 0x7a, 0x3f,
        0x02, 0x5f, 0x07, 0x37, 0xb8, 0x36, 0x5d, 0x6f, 0x09, 0x97, 0x21, 0x78, 0x93, 0xbc, 0x17,
        0x18, 0x42, 0x60, 0x35, 0x70, 0xb7, 0xb9, 0xce, 0x3b, 0x68, 0xba, 0x96, 0xac, 0x27, 0x7c,
        0xb5, 0x1b, 0x97, 0xda, 0x44, 0xd8, 0x3f, 0x49, 0x84, 0x17, 0x5d, 0xa2, 0x25, 0xd6, 0xdf,
        0x26, 0xc8, 0x75, 0xa1, 0xab, 0x93, 0xaf, 0x9a, 0x5d, 0x42, 0x90, 0x20, 0x47, 0xb4, 0xc1,
        0xf5, 0x3b, 0xac, 0xeb, 0xf2, 0x4d, 0x2c, 0x93, 0xaf, 0x29, 0xc5, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];
    let needle_ciphertext_bv = BoundedVec { storage: ciphertext, len: 146 };

    let plaintext: [u8; MAX] = [
        0x50, 0x4f, 0x53, 0x54, 0x20, 0x2f, 0x68, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    ];

    let heystack_plaintext_bv = BoundedVec { storage: plaintext, len: 8 }; // Must use 8 here, which is the actual of the plaintext.
    main(key, ctr, nonce, needle_ciphertext_bv, heystack_plaintext_bv);
}
